{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nexport const fetchUsers = createAsyncThunk(\"users/fetchUsers\", async () => {\n  const response = await fetch(\"http://localhost:8080/api/countries\");\n  const users = await response.json();\n  return users;\n});\nexport const fetchUsersById = createAsyncThunk(\"users/fetchUsersById\", async id => {\n  const response = await fetch(\"http://localhost:8080/api/country/\" + id);\n  const usersById = await response.json();\n  return usersById;\n});\nconst usersSlice = createSlice({\n  name: \"users\",\n  initialState: {\n    entities: [],\n    loading: false,\n    entitiesById: [],\n    entitiesContinent: [],\n    errors: []\n  },\n  reducers: {\n    userAdded(state, action) {\n      fetch('http://localhost:8080/api/country', {\n        method: 'POST',\n        body: action.payload.formData\n      }).then(response => response.json()).then(result => {\n        state.errors.push(...result);\n        console.log('Success:', result);\n      }).catch(error => {\n        console.error('Error:', error);\n      }); //console.log(\"----------------------------------------------------------\", action.payload.data)\n      //state.entities.push(action.payload);\n    },\n\n    userUpdated(state, action) {\n      const {\n        id,\n        name\n      } = action.payload;\n      const existingUser = state.entities.find(user => user.id === id);\n\n      if (existingUser) {\n        existingUser.name = name;\n        existingUser.id = id;\n      }\n    },\n\n    userDeleted(state, action) {\n      const {\n        id\n      } = action.payload;\n      const existingUser = state.entities.find(user => user.id === id);\n\n      if (existingUser) {\n        state.entities = state.entities.filter(user => user.id !== id);\n      }\n    }\n\n  },\n  extraReducers: {\n    [fetchUsers.pending]: (state, action) => {\n      state.loading = true;\n    },\n    [fetchUsers.fulfilled]: (state, action) => {\n      state.loading = false;\n      state.entities = [...state.entities, ...action.payload.data];\n      state.entitiesContinent = [\n      /* ...state.entitiesById, */\n      ...action.payload.continent];\n    },\n    [fetchUsersById.fulfilled]: (state, action) => {\n      state.entitiesById = [\n      /* ...state.entitiesById, */\n      ...action.payload.data];\n    },\n    [fetchUsers.rejected]: (state, action) => {\n      state.loading = false;\n    }\n  }\n});\nexport const {\n  userAdded,\n  userUpdated,\n  userDeleted\n} = usersSlice.actions;\nexport default usersSlice.reducer;","map":{"version":3,"sources":["/home/epic/Desktop/assignment/redux-crud/src/features/users/usersSlice.js"],"names":["createAsyncThunk","createSlice","fetchUsers","response","fetch","users","json","fetchUsersById","id","usersById","usersSlice","name","initialState","entities","loading","entitiesById","entitiesContinent","errors","reducers","userAdded","state","action","method","body","payload","formData","then","result","push","console","log","catch","error","userUpdated","existingUser","find","user","userDeleted","filter","extraReducers","pending","fulfilled","data","continent","rejected","actions","reducer"],"mappings":"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","sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\n\n\nexport const fetchUsers = createAsyncThunk(\"users/fetchUsers\", async () => {\n  const response = await fetch(\"http://localhost:8080/api/countries\");\n  const users = await response.json();\n  return users;\n});\n\nexport const fetchUsersById = createAsyncThunk(\"users/fetchUsersById\", async (id) => {\n  const response = await fetch(\"http://localhost:8080/api/country/\" + id);\n  const usersById = await response.json();\n  return usersById;\n});\n\n\n\n\n\nconst usersSlice = createSlice({\n  name: \"users\",\n  initialState: {\n    entities: [],\n    loading: false,\n    entitiesById: [],\n    entitiesContinent: [],\n    errors: []\n  },\n  reducers: {\n    userAdded(state, action) {\n\n      fetch('http://localhost:8080/api/country', { method: 'POST', body: action.payload.formData }).then(response => response.json())\n        .then(result => {\n          state.errors.push(...result)\n          console.log('Success:', result);\n        })\n        .catch(error => {\n          console.error('Error:', error);\n        });\n\n\n      //console.log(\"----------------------------------------------------------\", action.payload.data)\n      //state.entities.push(action.payload);\n    },\n    userUpdated(state, action) {\n      const { id, name } = action.payload;\n      const existingUser = state.entities.find((user) => user.id === id);\n      if (existingUser) {\n        existingUser.name = name;\n        existingUser.id = id;\n      }\n    },\n    userDeleted(state, action) {\n      const { id } = action.payload;\n      const existingUser = state.entities.find((user) => user.id === id);\n      if (existingUser) {\n        state.entities = state.entities.filter((user) => user.id !== id);\n      }\n    },\n  },\n  extraReducers: {\n    [fetchUsers.pending]: (state, action) => {\n      state.loading = true;\n    },\n    [fetchUsers.fulfilled]: (state, action) => {\n      state.loading = false;\n      state.entities = [...state.entities, ...action.payload.data];\n      state.entitiesContinent = [/* ...state.entitiesById, */ ...action.payload.continent];\n    },\n    [fetchUsersById.fulfilled]: (state, action) => {\n      state.entitiesById = [/* ...state.entitiesById, */ ...action.payload.data];\n    },\n    [fetchUsers.rejected]: (state, action) => {\n      state.loading = false;\n    },\n  },\n});\n\nexport const { userAdded, userUpdated, userDeleted } = usersSlice.actions;\n\nexport default usersSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}