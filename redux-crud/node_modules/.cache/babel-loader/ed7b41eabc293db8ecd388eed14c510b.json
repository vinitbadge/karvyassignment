{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nexport const fetchCountrys = createAsyncThunk(\"countrys/fetchCountrys\", async () => {\n  const response = await fetch(\"http://localhost:8080/api/countries\");\n  const countrys = await response.json();\n  return countrys;\n});\nexport const fetchCountrysById = createAsyncThunk(\"countrys/fetchCountrysById\", async id => {\n  const response = await fetch(\"http://localhost:8080/api/country/\" + id);\n  const countrysById = await response.json();\n  return countrysById;\n});\nconst countrysSlice = createSlice({\n  name: \"countrys\",\n  initialState: {\n    entities: [],\n    loading: false,\n    entitiesById: [],\n    entitiesContinent: [],\n    errors: {}\n  },\n  reducers: {\n    countryAdded(state, action) {}\n\n  },\n  extraReducers: {\n    [fetchCountrys.pending]: (state, action) => {\n      state.loading = true;\n    },\n    [fetchCountrys.fulfilled]: (state, action) => {\n      state.loading = false;\n      state.entities = [...action.payload.data];\n      state.entitiesContinent = [\n      /* ...state.entitiesById, */\n      ...action.payload.continent];\n    },\n    [fetchCountrysById.fulfilled]: (state, action) => {\n      state.entitiesById = [\n      /* ...state.entitiesById, */\n      ...action.payload.data];\n    },\n    [fetchCountrys.rejected]: (state, action) => {\n      state.loading = false;\n    }\n  }\n});\nexport const {\n  countryAdded\n} = countrysSlice.actions;\nexport default countrysSlice.reducer;","map":{"version":3,"sources":["/home/epic/Desktop/assignment/redux-crud/src/features/countrys/countrysSlice.js"],"names":["createAsyncThunk","createSlice","fetchCountrys","response","fetch","countrys","json","fetchCountrysById","id","countrysById","countrysSlice","name","initialState","entities","loading","entitiesById","entitiesContinent","errors","reducers","countryAdded","state","action","extraReducers","pending","fulfilled","payload","data","continent","rejected","actions","reducer"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,WAA3B,QAA8C,kBAA9C;AAGA,OAAO,MAAMC,aAAa,GAAGF,gBAAgB,CAAC,wBAAD,EAA2B,YAAY;AAClF,QAAMG,QAAQ,GAAG,MAAMC,KAAK,CAAC,qCAAD,CAA5B;AACA,QAAMC,QAAQ,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAvB;AACA,SAAOD,QAAP;AACD,CAJ4C,CAAtC;AAMP,OAAO,MAAME,iBAAiB,GAAGP,gBAAgB,CAAC,4BAAD,EAA+B,MAAOQ,EAAP,IAAc;AAC5F,QAAML,QAAQ,GAAG,MAAMC,KAAK,CAAC,uCAAuCI,EAAxC,CAA5B;AACA,QAAMC,YAAY,GAAG,MAAMN,QAAQ,CAACG,IAAT,EAA3B;AACA,SAAOG,YAAP;AACD,CAJgD,CAA1C;AAUP,MAAMC,aAAa,GAAGT,WAAW,CAAC;AAChCU,EAAAA,IAAI,EAAE,UAD0B;AAEhCC,EAAAA,YAAY,EAAE;AACZC,IAAAA,QAAQ,EAAE,EADE;AAEZC,IAAAA,OAAO,EAAE,KAFG;AAGZC,IAAAA,YAAY,EAAE,EAHF;AAIZC,IAAAA,iBAAiB,EAAE,EAJP;AAKZC,IAAAA,MAAM,EAAE;AALI,GAFkB;AAShCC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,YAAY,CAACC,KAAD,EAAQC,MAAR,EAAgB,CAE3B;;AAHO,GATsB;AAchCC,EAAAA,aAAa,EAAE;AACb,KAACpB,aAAa,CAACqB,OAAf,GAAyB,CAACH,KAAD,EAAQC,MAAR,KAAmB;AAC1CD,MAAAA,KAAK,CAACN,OAAN,GAAgB,IAAhB;AACD,KAHY;AAIb,KAACZ,aAAa,CAACsB,SAAf,GAA2B,CAACJ,KAAD,EAAQC,MAAR,KAAmB;AAC5CD,MAAAA,KAAK,CAACN,OAAN,GAAgB,KAAhB;AACAM,MAAAA,KAAK,CAACP,QAAN,GAAiB,CAAC,GAAGQ,MAAM,CAACI,OAAP,CAAeC,IAAnB,CAAjB;AACAN,MAAAA,KAAK,CAACJ,iBAAN,GAA0B;AAAC;AAA6B,SAAGK,MAAM,CAACI,OAAP,CAAeE,SAAhD,CAA1B;AACD,KARY;AASb,KAACpB,iBAAiB,CAACiB,SAAnB,GAA+B,CAACJ,KAAD,EAAQC,MAAR,KAAmB;AAChDD,MAAAA,KAAK,CAACL,YAAN,GAAqB;AAAC;AAA6B,SAAGM,MAAM,CAACI,OAAP,CAAeC,IAAhD,CAArB;AACD,KAXY;AAYb,KAACxB,aAAa,CAAC0B,QAAf,GAA0B,CAACR,KAAD,EAAQC,MAAR,KAAmB;AAC3CD,MAAAA,KAAK,CAACN,OAAN,GAAgB,KAAhB;AACD;AAdY;AAdiB,CAAD,CAAjC;AAgCA,OAAO,MAAM;AAAEK,EAAAA;AAAF,IAAmBT,aAAa,CAACmB,OAAvC;AAEP,eAAenB,aAAa,CAACoB,OAA7B","sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\n\n\nexport const fetchCountrys = createAsyncThunk(\"countrys/fetchCountrys\", async () => {\n  const response = await fetch(\"http://localhost:8080/api/countries\");\n  const countrys = await response.json();\n  return countrys;\n});\n\nexport const fetchCountrysById = createAsyncThunk(\"countrys/fetchCountrysById\", async (id) => {\n  const response = await fetch(\"http://localhost:8080/api/country/\" + id);\n  const countrysById = await response.json();\n  return countrysById;\n});\n\n\n\n\n\nconst countrysSlice = createSlice({\n  name: \"countrys\",\n  initialState: {\n    entities: [],\n    loading: false,\n    entitiesById: [],\n    entitiesContinent: [],\n    errors: {}\n  },\n  reducers: {\n    countryAdded(state, action) {\n\n    }\n  },\n  extraReducers: {\n    [fetchCountrys.pending]: (state, action) => {\n      state.loading = true;\n    },\n    [fetchCountrys.fulfilled]: (state, action) => {\n      state.loading = false;\n      state.entities = [...action.payload.data];\n      state.entitiesContinent = [/* ...state.entitiesById, */ ...action.payload.continent];\n    },\n    [fetchCountrysById.fulfilled]: (state, action) => {\n      state.entitiesById = [/* ...state.entitiesById, */ ...action.payload.data];\n    },\n    [fetchCountrys.rejected]: (state, action) => {\n      state.loading = false;\n    },\n  },\n});\n\nexport const { countryAdded } = countrysSlice.actions;\n\nexport default countrysSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}