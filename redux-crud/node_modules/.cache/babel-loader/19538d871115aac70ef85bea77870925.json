{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nexport const fetchUsers = createAsyncThunk(\"users/fetchUsers\", async () => {\n  const response = await fetch(\"http://localhost:8080/api/countries\");\n  const users = await response.json();\n  return users;\n});\nexport const fetchUsersById = createAsyncThunk(\"users/fetchUsersById\", async id => {\n  const responseDetail = await fetch(\"http://localhost:8080/api/country/\" + id);\n  const userDetail = await responseDetail.json();\n  return userDetail;\n});\nconst usersSlice = createSlice({\n  name: \"users\",\n  initialState: {\n    entities: [],\n    loading: false\n  },\n  reducers: {\n    userAdded(state, action) {\n      state.entities.push(action.payload);\n    },\n\n    userUpdated(state, action) {\n      const {\n        id,\n        name\n      } = action.payload;\n      const existingUser = state.entities.find(user => user.id === id);\n\n      if (existingUser) {\n        existingUser.name = name;\n        existingUser.id = id;\n      }\n    },\n\n    userDeleted(state, action) {\n      const {\n        id\n      } = action.payload;\n      const existingUser = state.entities.find(user => user.id === id);\n\n      if (existingUser) {\n        state.entities = state.entities.filter(user => user.id !== id);\n      }\n    }\n\n  },\n  extraReducers: {\n    [fetchUsers.pending]: (state, action) => {\n      state.loading = true;\n    },\n    [fetchUsers.fulfilled]: (state, action) => {\n      console.log(state, action);\n      state.loading = false;\n      state.entities = [...state.entities, ...action.payload.data];\n    },\n    [fetchUsers.rejected]: (state, action) => {\n      state.loading = false;\n    }\n  }\n});\nexport const {\n  userAdded,\n  userUpdated,\n  userDeleted\n} = usersSlice.actions;\nexport default usersSlice.reducer;","map":{"version":3,"sources":["/home/epic/Desktop/assignment/redux-crud/src/features/users/usersSlice.js"],"names":["createAsyncThunk","createSlice","fetchUsers","response","fetch","users","json","fetchUsersById","id","responseDetail","userDetail","usersSlice","name","initialState","entities","loading","reducers","userAdded","state","action","push","payload","userUpdated","existingUser","find","user","userDeleted","filter","extraReducers","pending","fulfilled","console","log","data","rejected","actions","reducer"],"mappings":"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","sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\n\nexport const fetchUsers = createAsyncThunk(\"users/fetchUsers\", async () => {\n  const response = await fetch(\"http://localhost:8080/api/countries\");\n  const users = await response.json();\n  return users;\n});\n\nexport const fetchUsersById = createAsyncThunk(\"users/fetchUsersById\", async (id) => {\n  const responseDetail = await fetch(\"http://localhost:8080/api/country/\" + id);\n  const userDetail = await responseDetail.json();\n  return userDetail;\n});\n\n\nconst usersSlice = createSlice({\n  name: \"users\",\n  initialState: {\n    entities: [],\n    loading: false,\n  },\n  reducers: {\n    userAdded(state, action) {\n      state.entities.push(action.payload);\n    },\n    userUpdated(state, action) {\n      const { id, name } = action.payload;\n      const existingUser = state.entities.find((user) => user.id === id);\n      if (existingUser) {\n        existingUser.name = name;\n        existingUser.id = id;\n      }\n    },\n    userDeleted(state, action) {\n      const { id } = action.payload;\n      const existingUser = state.entities.find((user) => user.id === id);\n      if (existingUser) {\n        state.entities = state.entities.filter((user) => user.id !== id);\n      }\n    },\n  },\n  extraReducers: {\n    [fetchUsers.pending]: (state, action) => {\n      state.loading = true;\n    },\n    [fetchUsers.fulfilled]: (state, action) => {\n      console.log(state, action)\n      state.loading = false;\n      state.entities = [...state.entities, ...action.payload.data];\n    },\n    [fetchUsers.rejected]: (state, action) => {\n      state.loading = false;\n    },\n  },\n});\n\nexport const { userAdded, userUpdated, userDeleted } = usersSlice.actions;\n\nexport default usersSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}