{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nexport const fetchUsers = createAsyncThunk(\"users/fetchUsers\", async () => {\n  const response = await fetch(\"http://localhost:8080/api/countries\");\n  const users = await response.json();\n  return users;\n});\nexport const fetchUsersById = createAsyncThunk(\"users/fetchUsersById\", async id => {\n  const response = await fetch(\"http://localhost:8080/api/country/\" + id);\n  const usersById = await response.json();\n  return usersById;\n});\nconst usersSlice = createSlice({\n  name: \"users\",\n  initialState: {\n    entities: [],\n    loading: false,\n    entitiesById: [],\n    entitiesContinent: [],\n    errors: {}\n  },\n  reducers: {\n    userAdded(state, action) {}\n\n  },\n  extraReducers: {\n    [fetchUsers.pending]: (state, action) => {\n      state.loading = true;\n    },\n    [fetchUsers.fulfilled]: (state, action) => {\n      state.loading = false;\n      state.entities = [...action.payload.data];\n      state.entitiesContinent = [\n      /* ...state.entitiesById, */\n      ...action.payload.continent];\n    },\n    [fetchUsersById.fulfilled]: (state, action) => {\n      state.entitiesById = [\n      /* ...state.entitiesById, */\n      ...action.payload.data];\n    },\n    [fetchUsers.rejected]: (state, action) => {\n      state.loading = false;\n    }\n  }\n});\nexport const {\n  userAdded\n} = usersSlice.actions;\nexport default usersSlice.reducer;","map":{"version":3,"sources":["/home/epic/Desktop/assignment/redux-crud/src/features/users/usersSlice.js"],"names":["createAsyncThunk","createSlice","fetchUsers","response","fetch","users","json","fetchUsersById","id","usersById","usersSlice","name","initialState","entities","loading","entitiesById","entitiesContinent","errors","reducers","userAdded","state","action","extraReducers","pending","fulfilled","payload","data","continent","rejected","actions","reducer"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,WAA3B,QAA8C,kBAA9C;AAGA,OAAO,MAAMC,UAAU,GAAGF,gBAAgB,CAAC,kBAAD,EAAqB,YAAY;AACzE,QAAMG,QAAQ,GAAG,MAAMC,KAAK,CAAC,qCAAD,CAA5B;AACA,QAAMC,KAAK,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAApB;AACA,SAAOD,KAAP;AACD,CAJyC,CAAnC;AAMP,OAAO,MAAME,cAAc,GAAGP,gBAAgB,CAAC,sBAAD,EAAyB,MAAOQ,EAAP,IAAc;AACnF,QAAML,QAAQ,GAAG,MAAMC,KAAK,CAAC,uCAAuCI,EAAxC,CAA5B;AACA,QAAMC,SAAS,GAAG,MAAMN,QAAQ,CAACG,IAAT,EAAxB;AACA,SAAOG,SAAP;AACD,CAJ6C,CAAvC;AAUP,MAAMC,UAAU,GAAGT,WAAW,CAAC;AAC7BU,EAAAA,IAAI,EAAE,OADuB;AAE7BC,EAAAA,YAAY,EAAE;AACZC,IAAAA,QAAQ,EAAE,EADE;AAEZC,IAAAA,OAAO,EAAE,KAFG;AAGZC,IAAAA,YAAY,EAAE,EAHF;AAIZC,IAAAA,iBAAiB,EAAE,EAJP;AAKZC,IAAAA,MAAM,EAAE;AALI,GAFe;AAS7BC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,SAAS,CAACC,KAAD,EAAQC,MAAR,EAAgB,CAExB;;AAHO,GATmB;AAc7BC,EAAAA,aAAa,EAAE;AACb,KAACpB,UAAU,CAACqB,OAAZ,GAAsB,CAACH,KAAD,EAAQC,MAAR,KAAmB;AACvCD,MAAAA,KAAK,CAACN,OAAN,GAAgB,IAAhB;AACD,KAHY;AAIb,KAACZ,UAAU,CAACsB,SAAZ,GAAwB,CAACJ,KAAD,EAAQC,MAAR,KAAmB;AACzCD,MAAAA,KAAK,CAACN,OAAN,GAAgB,KAAhB;AACAM,MAAAA,KAAK,CAACP,QAAN,GAAiB,CAAC,GAAGQ,MAAM,CAACI,OAAP,CAAeC,IAAnB,CAAjB;AACAN,MAAAA,KAAK,CAACJ,iBAAN,GAA0B;AAAC;AAA6B,SAAGK,MAAM,CAACI,OAAP,CAAeE,SAAhD,CAA1B;AACD,KARY;AASb,KAACpB,cAAc,CAACiB,SAAhB,GAA4B,CAACJ,KAAD,EAAQC,MAAR,KAAmB;AAC7CD,MAAAA,KAAK,CAACL,YAAN,GAAqB;AAAC;AAA6B,SAAGM,MAAM,CAACI,OAAP,CAAeC,IAAhD,CAArB;AACD,KAXY;AAYb,KAACxB,UAAU,CAAC0B,QAAZ,GAAuB,CAACR,KAAD,EAAQC,MAAR,KAAmB;AACxCD,MAAAA,KAAK,CAACN,OAAN,GAAgB,KAAhB;AACD;AAdY;AAdc,CAAD,CAA9B;AAgCA,OAAO,MAAM;AAAEK,EAAAA;AAAF,IAAgBT,UAAU,CAACmB,OAAjC;AAEP,eAAenB,UAAU,CAACoB,OAA1B","sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\n\n\nexport const fetchUsers = createAsyncThunk(\"users/fetchUsers\", async () => {\n  const response = await fetch(\"http://localhost:8080/api/countries\");\n  const users = await response.json();\n  return users;\n});\n\nexport const fetchUsersById = createAsyncThunk(\"users/fetchUsersById\", async (id) => {\n  const response = await fetch(\"http://localhost:8080/api/country/\" + id);\n  const usersById = await response.json();\n  return usersById;\n});\n\n\n\n\n\nconst usersSlice = createSlice({\n  name: \"users\",\n  initialState: {\n    entities: [],\n    loading: false,\n    entitiesById: [],\n    entitiesContinent: [],\n    errors: {}\n  },\n  reducers: {\n    userAdded(state, action) {\n\n    }\n  },\n  extraReducers: {\n    [fetchUsers.pending]: (state, action) => {\n      state.loading = true;\n    },\n    [fetchUsers.fulfilled]: (state, action) => {\n      state.loading = false;\n      state.entities = [...action.payload.data];\n      state.entitiesContinent = [/* ...state.entitiesById, */ ...action.payload.continent];\n    },\n    [fetchUsersById.fulfilled]: (state, action) => {\n      state.entitiesById = [/* ...state.entitiesById, */ ...action.payload.data];\n    },\n    [fetchUsers.rejected]: (state, action) => {\n      state.loading = false;\n    },\n  },\n});\n\nexport const { userAdded } = usersSlice.actions;\n\nexport default usersSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}